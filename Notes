C++ development

Step 1: Define the problem that you would like to solve (https://www.learncpp.com/cpp-tutorial/introduction-to-cpp-development/)

Examples
    “I want to write a program that will allow me to enter many numbers, then calculates the average.”
    “I want to write a program that generates a 2d maze and lets the user navigate through it. The user wins if they reach the end.”
    “I want to write a program that reads in a file of stock prices and predicts whether the stock will go up or down.”-
    "I want to code a game that does blah blah blah"

Step 2: Determine how you are going to solve the problem

This is the “how” step, where you determine how you are going to solve the problem you came up with in step 1.
It is also the step that is most neglected in software development. The crux of the issue is that there are many ways to solve a problem -- however, some of these solutions are good and some of them are bad.
Too often, a programmer will get an idea, sit down, and immediately start coding a solution. This often generates a solution that falls into the bad category.

Typically, good solutions have the following characteristics:

    They are straightforward (not overly complicated or confusing).
    They are well documented (especially around any assumptions being made or limitations).
    They are built modularly, so parts can be reused or changed later without impacting other parts of the program.
    They can recover gracefully or give useful error messages when something unexpected happens.

Step 3: Write a program

In order to write the program, we need two things: First, we need knowledge of a programming language -- that’s what these tutorials are for! Second, we need a text editor to write and save our C++ programs.
The set of C++ instructions that we input into the text editor is called the program’s source code (often shortened to just code).
It’s possible to write a program using any text editor you want, even something as simple as Windows’ notepad or Unix’s vi or pico.

Step 4: Compiling source code

First, the compiler checks your C++ code to make sure it follows the rules of the C++ language.
If it does not, the compiler will give you an error (and the corresponding line number) to help pinpoint what needs fixing. The compilation process will also be aborted until the error is fixed.

Second, the compiler translates your C++ code into machine language instructions.
These instructions are stored in an intermediate file called an object file. The object file also contains other data that is required or useful in subsequent steps (including data needed by the linker in step 5, and for debugging in step 7).

Object files are typically named name.o or name.obj, where name is the same name as the .cpp file it was produced from.

Step 5: Linking object files and libraries and creating the desired output file

First, the linker reads in each of the object files generated by the compiler and makes sure they are valid.

Second, the linker ensures all cross-file dependencies are resolved properly.
For example, if you define something in one .cpp file, and then use it in a different .cpp file, the linker connects the two together.
If the linker is unable to connect a reference to something with its definition, you’ll get a linker error, and the linking process will abort.

Third, the linker typically links in one or more library files, which are collections of precompiled code that have been “packaged up” for reuse in other programs.

Finally, the linker outputs the desired output file. Typically this will be an executable file that can be launched (but it could be a library file if that’s how you’ve set up your project).

LIBRARIES --

The standard library: C++ comes with an extensive library called the C++ Standard Library (usually called “the standard library”) that provides a set of useful capabilities for use in your programs.
                      One of the most commonly used parts of the C++ standard library is the Input/Output library (often called “iostream”), which contains functionality for printing text on a monitor and getting keyboard input from a user.

3rd party libraries: You can optionally link third party libraries, which are libraries that are created and distributed by independent entities (rather than as part of the C++ standard).
                     For example, let’s say you wanted to write a program that played sounds. The C++ standard library contains no such functionality.

Building --

Because there are multiple steps involved, the term building is often used to refer to the full process of converting source code files into an executable that can be run.
A specific executable produced as the result of building is sometimes called a build.

Steps 6 & 7: Testing and Debugging

Once you can run your program, then you can test it. Testing is the process of assessing whether your software is working as expected.
Basic testing typically involves trying different input combinations to ensure the software behaves correctly in different cases.

If the program does not behave as expected, then you will have to do some debugging, which is the process of finding and fixing programming errors.

---------------------------------------------------------------------------------------------------------------------------------------------------

Next section: Objects and Variables

1) Data and values

A program can acquire data to work with in many ways: from a file or database, over a network, from the user providing input on a keyboard, or from the programmer putting data directly into the source code of the program itself.

In programming, a single piece of data is called a value (sometimes called a data value). Common examples of values include:
    Numbers (e.g. 5 or -6.7).
    Characters, which are placed between single-quotes (e.g. 'H' or '$'). Only a single symbol may be used.

2) Random Access Memory

The main memory in a computer is called Random Access Memory. When we run a program, the operating system loads the program into RAM. Any data that is hardcoded into the program itself is loaded at this point.

The operating system also reserves some additional RAM for the program to use while it is running.
Common uses for this memory are to store values entered by the user, to store data read in from a file or network, or to store values calculated while the program is running

3) Objects and variables